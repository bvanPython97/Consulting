geom_boxplot(alpha = .5)
#For this game, it appears most of the responses should be under one second
#Only 10 responses of 1409 were over 1 second.
#Many responses were 0 (comes from unselected responses and skews averages)
#647 were eaual to zero, which is a flaw
df%>%
filter(game_name == "quick tap level 2")%>%
summarize(tot.over.5  = sum(response_reaction_time >= 1000, na.rm = TRUE),
prop.over.5 = sum(response_reaction_time >= 1000, na.rm = TRUE)/n(),
tot.eq.0    = sum(response_reaction_time == 0, na.rm = TRUE),
prop.eq.0 = sum(response_reaction_time == 0, na.rm = TRUE)/n(),
total = n(),
)
CTdf <- filter(df, game_name %in% CT)
CTdf <- CTdf[CTdf$response_reaction_time < 5000,]
nrow(CTdf)
#Recall handswype is the one that has the "checkpoint style"
#More trials = more successful on the task
HSdf <- filter(df, game_name =="hand swype")
HSdf <- HSdf[HSdf$response_reaction_time < 5000,]
nrow(HSdf)
#Note that for this one, we only want to count RTs of targets (distractors are 0)
QTdf <- filter(df, game_name =="quick tap level 2")
QTdf <- QTdf[QTdf$response_reaction_time < 1000,]
QTdf <- QTdf[QTdf$response_reaction_time > 0,]
nrow(QTdf)
RTno.out <- rbind(CTdf, QTdf, HSdf)
nrow(df)
nrow(RTno.out)
nrow(df)-nrow(RTno.out) #Should have removed 75 missing responses and 647 0s from QT
RTno.out%>%
ggplot(aes(x = ID, y = (response_reaction_time/1000)))+
geom_violin(alpha = .1, adjust = 1.5)+
geom_boxplot(alpha = .5)+
facet_grid(game_name~.)
view(RTno.out)
RTno.out%>%
filter(ID != NA)%>%
ggplot(aes(x = ID, y = (response_reaction_time/1000)))+
geom_violin(alpha = .1, adjust = 1.5)+
geom_boxplot(alpha = .5)+
facet_grid(game_name~.)
RTno.out%>%
filter(ID != NA)%>%
ggplot(aes(x = ID, y = (response_reaction_time/1000)))+
geom_violin(alpha = .1, adjust = 1.5)+
geom_boxplot(alpha = .5)+
facet_grid(game_name~.)
RTno.out%>%
filter(ID != "NA")%>%
ggplot(aes(x = ID, y = (response_reaction_time/1000)))+
geom_violin(alpha = .1, adjust = 1.5)+
geom_boxplot(alpha = .5)+
facet_grid(game_name~.)
#We can now calculate reaction times for each game for each participant
RTs <- RTno.out%>%
group_by(ID, timepoint, game_name)%>%
summarize(avgRT = mean(response_reaction_time, na.rm = TRUE))
RTs
#Next we can move to number correct for each game
#We can skip outliers for this one, since outliers are less likely to be extreme
Correct <- df%>%
group_by(ID, timepoint, game_name)%>%
summarize(tot.correct   = sum(is_response_correct == TRUE, na.rm = TRUE),
tot.incorrect = sum(is_response_correct == FALSE, na.rm = TRUE),
prop.correct = tot.correct/(tot.correct + tot.incorrect))
Correct
Game_Data <- merge(
x = Correct,
y = RTs,
by.x = c("ID", "timepoint", "game_name"),
by.y = c("ID", "timepoint", "game_name")
)
Game_Data
str(Game_Data)
PHQ.Corrs <- merge(
x = Merge.2,
y = Game_Data,
by.x = c("ID", "timepoint", "game_name"),
by.y = c("ID", "timepoint", "game_name"))
str(PHQ.Corrs)
PHQ.Corrs <- merge(
x = Merge.1,
y = Game_Data,
by.x = c("ID", "timepoint"),
by.y = c("StudyID_T1", "numTime"))
smile <- read.csv("SMILE full data 10 23 21_AARThesis_Deidentified_forNL.csv")
smile2 <- pivot_longer(smile,
cols = c(PHQ_T1_total, PHQ_T2_total, PHQ_T3_total),
names_to = "Time",
values_to = "PHQ.Score")
smile2 <- mutate(smile2, numTime = case_when(Time == "PHQ_T1_total" ~ 1,
Time == "PHQ_T2_total" ~ 2,
Time == "PHQ_T3_total" ~ 3))
smile2 <- select(smile2, StudyID_T1, numTime, PHQ.Score)
str(smile2)
PHQ.Corrs <- merge(
x = Merge.1,
y = Game_Data,
by.x = c("ID", "timepoint"),
by.y = c("StudyID_T1", "numTime"))
PHQ.Corrs <- merge(
x = smile2,
y = Game_Data,
by.x = c("ID", "timepoint"),
by.y = c("StudyID_T1", "numTime"))
PHQ.Corrs <- merge(
x = Game_Data,
y = smile2,
by.x = c("ID", "timepoint"),
by.y = c("StudyID_T1", "numTime"))
#Need keys from intervention keys
IntKey <- read.csv("NeurUX.Intervention.Group.csv")
#One problem is that users get the same name across semesters. Need to manually fix this
sem1 <- c(22585580,
22585581,
22585582,
22585583,
22585586,
22585588,
22585591,
22585592,
22585593,
22585594,
22585596,
22585597,
22585599,
22585600,
22585601,
22585604,
22585606,
22585609,
22585610)
sem2 <- c(22585612,
22585613,
22585614,
22585616,
22585619,
22585620,
22585621,
22585623,
22585624,
22585625,
22585626,
22585627,
22585629,
22585630)
IntKey <- mutate(IntKey, semester = case_when(Study.ID %in% sem1 ~ 1,
Study.ID %in% sem2 ~ 2),
Int.Fac = factor(Intervention.Group,
levels = c(0, 1),
labels = c("Control", "Intervention")))
IntKey1 <-filter(IntKey, semester == 1)
IntKey1 <- mutate(IntKey1, ID = as.factor(as.numeric(gsub("user", "", NeurUX.ID))+100))
IntKey2 <-filter(IntKey, semester == 2)
IntKey2 <- mutate(IntKey2, ID = as.factor(as.numeric(gsub("user", "", NeurUX.ID))+200))
IntKey <-rbind(IntKey1, IntKey2)
view(IntKey)
#Can merge with NeurUX sheet to get control and intervention groups
Merge.1 <- merge(
x = Game_Data,
y = IntKey,
by.x = "ID",
by.y = "ID"
)
str(Merge.1)
#Can now merge with the smile dataset
PHQ.Corrs <- merge(
x = Merge.1,
y = smile2,
by.x = c("Study.ID", "timepoint"),
by.y = c("StudyID_T1", "numTime"))
str(PHQ.Corrs)
library(corrplot)
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
facet_gid(timepoints ~ game_name)
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
facet_grid(timepoints ~ game_name)
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
facet_grid(timepoint ~ game_name)
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
facet_grid(game_name ~ timepoint)
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
geom_smooth()
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
geom_smooth()+
facet_grid(game_name ~ timepoint)
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
geom_smooth(method = "lm")+
facet_grid(game_name ~ timepoint)
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
geom_smooth(method = "lm")+
facet_grid(game_name ~ Int.Fac)
PHQ.Corrs%>%
ggplot(aes(x = avgRT, y = PHQ.Score))+
geom_point()+
geom_smooth(method = "lm")+
facet_grid(game_name ~ timepoint)
PHQ.Corrs%>%
group_by(game_name, timepoint)%>%
summarize(cors = cor(PHQ.Score, avgRT))
PHQ.Corrs%>%
group_by(timepoint, game_name)%>%
summarize(cors = cor(PHQ.Score, avgRT))
corrplot(PHQ.Corrs)
str(PHQ.Corrs)
PHQ.Corrs.Wide <- pivot_wider(PHQ.Corrs,
id_cols = c(Study.ID, timepoint, ID, game_name, NeurUX.ID,
Headspace.ID, Intervention.Group, semester, Int.Fac))
str(PHQ.Corrs)
str(PHQ.Corrs.Wide)
view(PHQ.Corrs.Wide)
?pivot_wider
PHQ.Corrs.Wide <- pivot_wider(PHQ.Corrs,
id_cols = c(Study.ID, ID, NeurUX.ID,
Headspace.ID, Intervention.Group, semester, Int.Fac),
names_from = c(game_name, timepoint),
values_from = c(tot.correct, tot.incorrect, prop.correct,
avgRT, PHQ.Score))
view(PHQ.Corrs.Wide)
Time1Corrs <- filter(PHQ.Corrs, timepoint == 1)
Time2Corrs <- filter(PHQ.Corrs, timepoint == 2)
Time3Corrs <- filter(PHQ.Corrs, timepoint == 3)
Time1Corrs.Wide <- pivot_wider(PHQ.Corrs,
id_cols = c(Study.ID, ID, NeurUX.ID, timepoint,
Headspace.ID, Intervention.Group, semester, Int.Fac),
names_from = c(game_name),
values_from = c(tot.correct, tot.incorrect, prop.correct,
avgRT, PHQ.Score))
view(Time1Corrs.Wide)
Time1Corrs.Wide <- pivot_wider(Time1Corrs,
id_cols = c(Study.ID, ID, NeurUX.ID, timepoint,
Headspace.ID, Intervention.Group, semester, Int.Fac),
names_from = c(game_name),
values_from = c(tot.correct, tot.incorrect, prop.correct,
avgRT, PHQ.Score))
view(Time1Corrs.Wide)
Time1Corrs.Wide <- pivot_wider(Time1Corrs,
id_cols = c(Study.ID, ID, NeurUX.ID, timepoint,
Headspace.ID, Intervention.Group, semester, Int.Fac,
PHQ.Score),
names_from = c(game_name),
values_from = c(tot.correct, tot.incorrect, prop.correct,
avgRT))
view(Time1Corrs.Wide)
Time2Corrs.Wide <- pivot_wider(Time2Corrs,
id_cols = c(Study.ID, ID, NeurUX.ID, timepoint,
Headspace.ID, Intervention.Group, semester, Int.Fac,
PHQ.Score),
names_from = c(game_name),
values_from = c(tot.correct, tot.incorrect, prop.correct,
avgRT))
Time3Corrs.Wide <- pivot_wider(Time3Corrs,
id_cols = c(Study.ID, ID, NeurUX.ID, timepoint,
Headspace.ID, Intervention.Group, semester, Int.Fac,
PHQ.Score),
names_from = c(game_name),
values_from = c(tot.correct, tot.incorrect, prop.correct,
avgRT))
view(Time1Corrs.Wide)
view(Time2Corrs.Wide)
view(Time3Corrs.Wide)
T1 <- corrplot(Time1Corrs.Wide)
T1 <- corrplot(is.numeric(Time1Corrs.Wide))
str(Time1Corrs)
str(Time1Corrs.Wide)
T1s <- select(Time1Corrs.Wide$PHQ.Score: Time1Corrs.Wide$avgRT_quick tap level 2)
T1s <- select(Time1Corrs.Wide$PHQ.Score: Time1Corrs.Wide$'avgRT_quick tap level 2'')
T1 <- corrplot()
T1s <- select(Time1Corrs.Wide$PHQ.Score: Time1Corrs.Wide$'avgRT_quick tap level 2')
T1s <- select(Time1Corrs.Wide$PHQ.Score:Time1Corrs.Wide$'avgRT_quick tap level 2')
T1s <- Time1Corrs.Wide[9:21]
T1s
str(T1s)
str(Time1Corrs.Wide)
T1s <- Time1Corrs.Wide[9:29]
str(T1s)
T1 <- corrplot(T1s)
T1s <- data.frame(Time1Corrs.Wide[9:29])
str(T1s)
T1 <- corrplot(T1s)
T1s <- data.frame(as.numeric(Time1Corrs.Wide[9:29]))
T1s <- data.frame(Time1Corrs.Wide[9:29])
str(T1s)
T1s <- mutate_if(T1s, is.integer, as.numeric)
str(T1s)
T1 <- corrplot(T1s)
T1 <- cor(T1s)
corrplot(T1)
corrplot(T1, method = "number")
?corrplot
corrplot(T1, method = "number", number.digits = 2)
corrplot(T1, method = "number", number.digits = 2, insig = "blank")
corrplot(T1, method = "number", number.font = 1, number.digits = 2, insig = "blank")
corrplot(T1, method = "number", number.font = .11, number.digits = 2, insig = "blank")
str(Time1Corrs.Wide)
T1CRCT <- data.frame(Time1Corrs.Wide[9:24])
T1CRCT <- mutate_if(T1CRCT, is.integer, as.numeric)
str(T1CRCT)
T1CRCT <- cor(T1CRCT)
corrplot(T1CRCT)
corrplot(T1CRCT, method = "number", number.font = .11, number.digits = 2, insig = "blank")
T1CRCT
T1CRCT[1:15]
T1CRCT[1:16]
rbind(rownames(T1CRCT, T1CRCT[1:16])
rbind(rownames(T1CRCT, T1CRCT[1:16]))
rbind(rownames(T1CRCT), T1CRCT[1:16])
T1s <- data.frame(Time1Corrs.Wide[9:24])
T1s <- mutate_if(T1CRCT, is.integer, as.numeric)
str(T1s)
T1s <- data.frame(Time1Corrs.Wide[9:29])
T1s <- mutate_if(T1CRCT, is.integer, as.numeric)
str(T1s)
T1 <- cor(T1s)
corrplot(T1)
Correct <- rbind(rownames(T1), T1[1:21])
T1.Corrs <- rbind(rownames(T1), T1[1:21])
str(T1.Corrs)
T1.Corrs <- data.frame(rbind(rownames(T1), T1[1:21]))
str(T1.Corrs)
T1.Corrs <- rbind(rownames(T1), T1[1:21])
str(T1.Corrs)
T1.Corrs <- cbind(rownames(T1), T1[1:21])
str(T1.Corrs)
T1.Corrs <- data.frame(rbind(rownames(T1), T1[1:21]))
t(T1.Corrs)
T1.Corrs <- data.frame(t(T1.Corrs))
str(T1.Corrs)
T1.Corrs <- mutate(Corr = as.numeric(X2))
T1.Corrs <- mutate(T1.Corrs, Corr = as.numeric(X2))
str(T1.Corrs)
Order(T1.Corrs, Corr)
Sort(T1.Corrs, Corr)
sort(T1.Corrs, Corr)
order(T1.Corrs, Corr)
T1.Corrs <- order(T1.Corrs, order = Corr)
T1.Corrs <- order(T1.Corrs, order = T1.Corrs$Corr)
T1.Corrs <- order(T1.Corrs, T1.Corrs$Corr)
T1.Corrs <- sort(T1.Corrs, T1.Corrs$Corr)
T1.Corrs[order(Corr),]
T1.Corrs[order(Corr),]
T1.Corrs[order(T1.Corrs$Corr),]
head(T1.Corrs[order(T1.Corrs$Corr),])
head(T1.Corrs[order(-T1.Corrs$Corr),])
#Correct answers on quick tap are negatively associated with PHQ
#Incorrect answers on CT3 and CT1 reaction time are also negatively correlated (less)
head(T1.Corrs[order(T1.Corrs$Corr),])
#Incorrect quick tap answers are positively correlated with PHQ
#Correct answers on CT3 are similarly positvely correlated (less)
head(T1.Corrs[order(-T1.Corrs$Corr),])
plot(Time1Corrs.Wide$`tot.incorrect_quick tap level 2`, Time1Corrs.Wide$PHQ.Score)
plot(Time1Corrs.Wide$tot.incorrect_quick.tap.level.2, Time1Corrs.Wide$PHQ.Score)
str(T1.Corrs)
str(T1.Corrs.Wide)
str(Time1Corrs.Wide)
T1Viz <- data.frame(Time1Corrs.Wide)
str(T1Viz)
T1Viz%>%
ggplot(aes(x = tot.correct_quick.tap.level.2, y = PHQ.Score))+
geom_point()
T1Viz%>%
ggplot(aes(x = tot.correct_quick.tap.level.2, y = PHQ.Score))+
geom_point()+
geom_smooth()
T1Viz%>%
ggplot(aes(x = tot.correct_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth()
T1Viz%>%
ggplot(aes(x = tot.correct_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm")
T1Viz%>%
ggplot(aes(x = tot.correct_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = prop.correct_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = prop.correct_quick.tap.level.2, y = PHQ.Score))+
geom_point()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = tot.incorrect_cp;pr.trick.3, y = PHQ.Score))+
geom_point()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = tot.incorrect_color.trick.3, y = PHQ.Score))+
geom_point()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = tot.incorrect_color.trick.3, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = prop.correct_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = tot.incorrect_quick.tap.level.2, y = PHQ.Score))+
geom_point()
T1Viz%>%
ggplot(aes(x = tot.incorrect_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = tot.correct_color.trick.3, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = prop.correct_color.trick.3, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = tot.correct_color.trick.3, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
T1Viz%>%
ggplot(aes(x = prop.correct_color.trick.3, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
?ggarrange
??ggarrange
install.packages("ggpubr")
library(ggpubr)
ggarrange(pos1, pos2, pos3)
pos1 <-
T1Viz%>%
ggplot(aes(x = tot.incorrect_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
pos2 <-
T1Viz%>%
ggplot(aes(x = tot.correct_color.trick.3, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
pos3 <-
T1Viz%>%
ggplot(aes(x = prop.correct_color.trick.3, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
library(ggpubr)
ggarrange(pos1, pos2, pos3)
ggarrange(pos1,
ggarrange(pos2, pos3))
ggarrange(pos1,
ggarrange(pos2, pos3, ncol = 2), nrow = 2)
ggarrange(pos1,
ggarrange(pos2,
pos3,
ncol = 2,
labels = c("CT3 Total Correct", "CT3 Proportion Correct")),
nrow = 2)
ggarrange(pos1,
ggarrange(pos2,
pos3,
ncol = 2,
labels = c("CT3 Total Correct", "CT3 Proportion Correct")),
nrow = 2, labels = "QT Total Incorrect")
neg1<-
T1Viz%>%
ggplot(aes(x = tot.correct_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
neg2<-
T1Viz%>%
ggplot(aes(x = prop.correct_quick.tap.level.2, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
neg3<-
T1Viz%>%
ggplot(aes(x = tot.incorrect_color.trick.3, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
neg4<-
T1Viz%>%
ggplot(aes(x = avgRT_color.trick.1, y = PHQ.Score))+
geom_jitter()+
geom_smooth(method = "lm", formula = "y ~ x")
ggarrange(neg1, neg2, neg3, neg4)
"CT3 Total Incorrect", "CT1 Reaction Time")
ggarrange(neg1, neg2, neg3, neg4,
labels = c("QT Total Correct", "QT Proportion Correct",
"CT3 Total Incorrect", "CT1 Reaction Time"))
ggarrange(pos1,
ggarrange(pos2,
pos3,
ncol = 2,
labels = c("CT3 Total Correct", "CT3 Proportion Correct")),
nrow = 2, labels = "QT Total Incorrect")
