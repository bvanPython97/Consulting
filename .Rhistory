time_point,
treatment,
treat_fac
) %>%
filter(game_name %in% c("color trick 1",
"color trick 2",
"color trick 3"))
#calculate average reaction time for each subject at each time point for each color trick
colorT <- colorTrick %>% filter(event_type == "trial" &
is_response_correct == TRUE) %>%
group_by(treatment,game_name, ID, time_point) %>%
summarise('average_RT' = sprintf("%0.2f", mean(response_reaction_time)),
.groups = 'drop')
#change time_point, and ID into factors
colorT[, c(1:4)] <- lapply(colorT[, c(1:4)], function(x) as.factor(x))
#change average reaction time into numeric
colorT$average_RT <- as.numeric(colorT$average_RT)
str(colorT)
#subset intervention data set with only ID and treatment status
Intervention <- rbind(Intervention1, Intervention2)
R1 <- mutate(R1, time_point = 1, ID = paste0('A', substr(userid, 5, 7)))
R2 <- mutate(round2_updated, time_point = 2, ID = paste0('A', substr(userid, 5, 7)))
R3 <- mutate(round3_updated, time_point = 3, ID = paste0('A', substr(userid, 5, 7)))
R4 <- mutate(round4_updated, time_point = 1, ID = paste0('B', substr(userid, 5, 7)))
R5 <- mutate(R5, time_point = 2, ID = paste0('B', substr(userid, 5, 7)))
R6 <- mutate(round6_updated, time_point = 3, ID = paste0('B', substr(userid, 5, 7)))
#combine all data into one whole dataset
R_all <- rbind(R1, R2, R3, R4, R5, R6)
#Merge Intervention into R_all dataset
data <- merge(R_all, Intervention, by = "ID")
#update OCT 24
#subset color trick
colorTrick <- data %>% select (
game_name,
ID,
event_type,
is_response_correct,
response_reaction_time,
correct_count,
incorrect_count,
user_response,
average_reaction_time,
level_total_time,
mechanic_name,
time_point,
treatment
) %>%
filter(game_name %in% c("color trick 1",
"color trick 2",
"color trick 3"))
#calculate average reaction time for each subject at each time point for each color trick
colorT <- colorTrick %>% filter(event_type == "trial" &
is_response_correct == TRUE) %>%
group_by(treatment,game_name, ID, time_point) %>%
summarise('average_RT' = sprintf("%0.2f", mean(response_reaction_time)),
.groups = 'drop')
#change time_point, and ID into factors
colorT[, c(1:4)] <- lapply(colorT[, c(1:4)], function(x) as.factor(x))
#change average reaction time into numeric
colorT$average_RT <- as.numeric(colorT$average_RT)
str(colorT)
#EAD
par(mfrow = c(2,2))
#check average reaction time(RT) distribution
plot(colorT$average_RT, col = 'blue', main = "Mean RT Dist.",
ylab="Average raction time")    #looks not normal
#check average RT for 3 color tricks
plot(average_RT ~ game_name, data = colorT)
#check average RT for intervention group and control group
plot(average_RT ~ treatment,pch = 19, col = "#ee1311", data = colorT)
#check average RT for time points
plot(average_RT ~ time_point, pch = 19, col = "#01ff33", data = colorT)
#We can add the fitted values to our original dataset to show how this model fits our data
colorT <- mutate(colorT, ngFixed = data.frame(model.a$fitted)$fixed,
tp_cont = as.numeric(time_point),
treat_cont = as.numeric(treatment))
str(colorT)
colorT$treat_cont
colorT$treat_cont>1
sum(colorT$treat_cont<=1)
sum(colorT$treat_cont>1)
#We can add the fitted values to our original dataset to show how this model fits our data
colorT <- mutate(colorT, ngFixed = data.frame(model.a$fitted)$fixed,
tp_cont = as.numeric(time_point),
treat_cont = as.numeric(treatment)-1)
sum(colorT$treat_cont--1)
sum(colorT$treat_cont==1)
sum(colorT$treat_cont==0)
sum(colorT$treat_cont==1)
sum(colorT$treat_cont==0)
#We will now move on to the linear growth model and include intervention
model.c <- nlme(average_RT ~ (beta_00 + beta_01*treat_cont + d_0i) +
(beta_10 + beta_11*treat_cont + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_01 + beta_10 + beta_11 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1343, beta_01 = -84, beta_10 = -100, beta_11= -10),
na.action = "na.omit",
control = nlmeControl(maxIter = 5000, tolerance = 200, msMaxIter = 100),
verbose = TRUE)
control = nlmeControl(maxIter = 5000, tolerance = 200, msMaxIter = 100),
control = nlmeControl(maxIter = 5000, tolerance = 200, msMaxIter = 100)
#We will now move on to the linear growth model and include intervention
model.c <- nlme(average_RT ~ (beta_00 + beta_01*treat_cont + d_0i) +
(beta_10 + beta_11*treat_cont + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_01 + beta_10 + beta_11 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1343, beta_01 = -84, beta_10 = -100, beta_11= -10),
na.action = "na.omit",
control = nlmeControl(maxIter = 5000, tolerance = 200, msMaxIter = 100))
#We will now move on to the linear growth model and include intervention
model.c <- nlme(average_RT ~ (beta_00 + beta_01*treat_cont + d_0i) +
(beta_10 + beta_11*treat_cont + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_01 + beta_10 + beta_11 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1343, beta_01 = -84, beta_10 = -100, beta_11= -10),
na.action = "na.omit",
control = nlmeControl(maxIter = 5000, tolerance = 200, msMaxIter = 1000))
#We will now move on to the linear growth model and include intervention
model.c <- nlme(average_RT ~ (beta_00 + beta_01*treat_cont + d_0i) +
(beta_10 + beta_11*treat_cont + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_01 + beta_10 + beta_11 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1343, beta_01 = -84, beta_10 = -100, beta_11= -10),
na.action = "na.omit",
control = nlmeControl(maxIter = 5000, tolerance = 200, msMaxIter = 1000),
verbose = TRUE)
#We will now move on to the linear growth model and include intervention
model.c <- nlme(average_RT ~ (beta_00 + beta_01*treat_cont + d_0i) +
(beta_10 + beta_11*treat_cont + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_01 + beta_10 + beta_11 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1694, beta_01 = -105, beta_10 = -184, beta_11= 16),
na.action = "na.omit",
control = nlmeControl(maxIter = 5000, tolerance = 200, msMaxIter = 1000),
verbose = TRUE)
#We will now move on to the linear growth model and include intervention
model.c <- nlme(average_RT ~ (beta_00 + beta_01*treat_cont + d_0i) +
(beta_10 + beta_11*treat_cont + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_01 + beta_10 + beta_11 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1694, beta_01 = -105, beta_10 = -184, beta_11= 16),
na.action = "na.omit")
start= c(beta_00 = 1500, beta_10 = -84),
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) +
(beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1500, beta_10 = -84),
na.action = "na.omit")
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) +
(beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1300, beta_10 = -84),
na.action = "na.omit")
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) +
(beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1300, beta_10 = -84),
na.action = "na.omit",
control = nlmeControl(maxIter = 1000))
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) +
(beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1300, beta_10 = -84),
na.action = "na.omit",
control = nlmeControl(msMaxIter = 1000))
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) + (beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 1300, beta_10 = -84),
na.action = "na.omit",
control = nlmeControl(msMaxIter = 1000))
str(colorT)
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) + (beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 130, beta_10 = -84),
na.action = "na.omit",
control = nlmeControl(msMaxIter = 1000))
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) + (beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 130, beta_10 = -10),
na.action = "na.omit",
control = nlmeControl(msMaxIter = 1000))
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) + (beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start= c(beta_00 = 130, beta_10 = -.25),
na.action = "na.omit",
control = nlmeControl(msMaxIter = 1000))
#We will now move on to the linear growth model and include intervention
model.b <- nlme(average_RT ~ (beta_00 + d_0i) + (beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start = c(beta_00 = 130, beta_10 = -.25),
na.action = "na.omit",
control = nlmeControl(msMaxIter = 1000))
warnings()
?nlmeControl
#We will now move on to the linear growth model
model.b <- nlme(average_RT ~ (beta_00 + d_0i) + (beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start = c(beta_00 = 130, beta_10 = -.25),
na.action = "na.omit",
control = nlmeControl(msMaxIter = 1000, msTol = 1000))
#We will now move on to the linear growth model
model.b <- nlme(average_RT ~ (beta_00 + d_0i) + (beta_10 + d_1i)*tp_cont,
data = colorT,
fixed = beta_00 + beta_10 ~ 1,
random = d_0i + d_1i ~ 1,
group = ~ ID,
start = c(beta_00 = 130, beta_10 = -.25),
na.action = "na.omit",
control = nlmeControl(msMaxIter = 1000, tolerance = 200))
smile <- read.csv("SMILE full data 10 23 21_AARThesis_Deidentified_forNL.csv")
str(smile)
?select
??select
smile <- read.csv("SMILE full data 10 23 21_AARThesis_Deidentified_forNL.csv")
smile%>%
smile2 <- select(StudyID_T1, PHQ_T1_total)
library(tidyverse)
smile%>%
smile2 <- select(StudyID_T1, PHQ_T1_total)
#Reading timepoints 1-6
R1<-read.csv("round1_updated.csv")
R2<-read.csv("round2_updated.csv")
R3<-read.csv("round3_updated.csv")
R4<-read.csv("round4_updated.csv")
R5<-read.csv("round5_updated.csv")
R6<-read.csv("round6_updated.csv")
#Was at 1049 (16 duplicates)
nrow(R5)
#Can filter out using unique timestamp from csv file
R5<- R5%>%
filter(level_start_timestamp != "2021-03-25T18:55:58.767Z")
#Now at 1033
nrow(R5)
#This next step has multiple purposes. First, we are adding "semester" and "timepoint"
#variables to the dataset. Since "user1", "user2"... "usern" was used for both
#semesters, despite these representing different people, I created a new ID variable.
#For semester 1, it is the old ID +100; for semester 2, it is +200.
R1<-mutate(R1, semester=1, timepoint=1, ID = as.factor(as.numeric(gsub("user", "", userid))+100))
R2<-mutate(R2, semester=1, timepoint=2, ID = as.factor(as.numeric(gsub("user", "", userid))+100))
R3<-mutate(R3, semester=1, timepoint=3, ID = as.factor(as.numeric(gsub("user", "", userid))+100))
R4<-mutate(R4, semester=2, timepoint=1, ID = as.factor(as.numeric(gsub("user", "", userid))+200))
R5<-mutate(R5, semester=2, timepoint=2, ID = as.factor(as.numeric(gsub("user", "", userid))+200))
R6<-mutate(R6, semester=2, timepoint=3, ID = as.factor(as.numeric(gsub("user", "", userid))+200))
#Combining all six datasets
Full<-rbind(R1, R2, R3, R4, R5, R6)
#Ensuring the data looks correct and everything merged as expected
str(Full)
#We know that user40 was a test case, so this person needs to be removed
Full <- Full%>%
filter(ID != 140)
IntKey <- read.csv("NeurUX.Intervention.Group.csv")
#One problem is that users get the same name across semesters. Need to manually fix this
sem1 <- c(22585580,
22585581,
22585582,
22585583,
22585586,
22585588,
22585591,
22585592,
22585593,
22585594,
22585596,
22585597,
22585599,
22585600,
22585601,
22585604,
22585606,
22585609,
22585610)
sem2 <- c(22585612,
22585613,
22585614,
22585616,
22585619,
22585620,
22585621,
22585623,
22585624,
22585625,
22585626,
22585627,
22585629,
22585630)
IntKey <- mutate(IntKey, semester = case_when(Study.ID %in% sem1 ~ 1,
Study.ID %in% sem2 ~ 2))
IntKey1 <-filter(IntKey, semester == 1)
IntKey1 <- mutate(IntKey1, ID = as.factor(as.numeric(gsub("user", "", NeurUX.ID))+100))
IntKey2 <-filter(IntKey, semester == 2)
IntKey2 <- mutate(IntKey2, ID = as.factor(as.numeric(gsub("user", "", NeurUX.ID))+200))
IntKey <-rbind(IntKey1, IntKey2)
view(IntKey)
#Can merge with NeurUX sheet to get control and intervention groups
Merge.1 <- merge(
x = Full,
y = IntKey,
by.x = "ID",
by.y = "ID"
)
smile <- read.csv("SMILE full data 10 23 21_AARThesis_Deidentified_forNL.csv")
smile%>%
smile2 <- select(StudyID_T1, PHQ_T1_total)
#Can now merge with SMILE data
Merge.2 <- merge(
x = Merge.1,
y = smile2,
by.x = "Study.ID",
by.y = "StudyID_T1"
)
smile %>%
smile2 <- select(StudyID_T1, PHQ_T1_total)
smile2 <- select(smile, StudyID_T1, PHQ_T1_total)
view(smile2)
#Can now merge with SMILE data
Merge.2 <- merge(
x = Merge.1,
y = smile2,
by.x = "Study.ID",
by.y = "StudyID_T1"
)
view(Merge.2)
Scores<-filter(Merge.2, event_type == "scorecard")
str(Scores)
Scores%>%
filter(timepoint == 1)%>%
filter(game_name == "color trick 1")%>%
ggplot(aes(x = average_reaction_time, y = PHQ_T1_total))+
geom_point()
Scores%>%
filter(timepoint == 1)%>%
filter(game_name == "color trick 1")%>%
ggplot(aes(x = average_reaction_time, y = PHQ_T1_total))+
geom_jitter()
Scores%>%
filter(timepoint == 1)%>%
filter(game_name == "color trick 1")%>%
ggplot(aes(x = average_reaction_time, y = PHQ_T1_total))+
geom_jitter()
Scores%>%
filter(timepoint == 1)%>%
# filter(game_name == "color trick 1")%>%
ggplot(aes(x = average_reaction_time, y = PHQ_T1_total))+
geom_jitter()
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = average_reaction_time, y = PHQ_T1_total))+
geom_jitter()+
facet_wrap(.~game_name)
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()+
facet_wrap(.~game_name)
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()+
#  facet_wrap(.~game_name)
#Making timepoint into a factor for later use
Full$tp_fac <- ordered(Full$timepoint,
levels = c(1, 2, 3),
labels = c("Time 1", "Time 2", "Time 3")
)
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()+
facet_wrap(.~game_name)
Scores%>%
filter(timepoint == 1)%>%
filter(game_name =="color trick 1")%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()
Scores%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()+
facet_grid(timepoint~game_name)
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()+
facet_grid(Intervention.Group~game_name)
smile2 <- select(smile, StudyID_T1, PHQ_T1_total, PHQ_T2_Total, PHQ_T3_Total)
smile2 <- select(smile, StudyID_T1, PHQ_T1_total, PHQ_T2_total, PHQ_T3_total)
#Can now merge with SMILE data
Merge.2 <- merge(
x = Merge.1,
y = smile2,
by.x = "Study.ID",
by.y = "StudyID_T1"
)
Scores<-filter(Merge.2, event_type == "scorecard")
Scores%>%
filter(timepoint == 1)%>%
filter(game_name =="color trick 1")%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()+
facet_grid(.~game_name)
Scores%>%
filter(timepoint == 1)%>%
filter(average_reaction_time < 4000)
Scores%>%
filter(timepoint == 1)%>%
filter(average_reaction_time < 4000)%>%
ggplot(aes(x = PHQ_T1_total, y = average_reaction_time))+
geom_jitter()+
facet_grid(.~game_name)
Scores%>%
group_by(game_name)%>%
summarize(corr = cor(PHQ_T1_total, average_reaction_time))
Scores%>%
filter(timepoint == 1)%>%
filter(average_reaction_time < 4000)%>%
group_by(game_name)%>%
summarize(corr = cor(PHQ_T1_total, average_reaction_time))
Scores%>%
filter(timepoint == 1)%>%
#  filter(average_reaction_time < 4000)%>%
group_by(game_name)%>%
summarize(corr = cor(PHQ_T1_total, average_reaction_time))
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = PHQ_T1_total, y = correct_count))+
geom_jitter()+
facet_grid(.~game_name)
Scores%>%
filter(timepoint == 1)%>%
#  filter(average_reaction_time < 4000)%>%
group_by(game_name)%>%
summarize(corr_RT = cor(PHQ_T1_total, average_reaction_time)
corr_right = cor(PHQ_T1_total, correct_count))
Scores%>%
filter(timepoint == 1)%>%
#  filter(average_reaction_time < 4000)%>%
group_by(game_name)%>%
summarize(corr_RT = cor(PHQ_T1_total, average_reaction_time),
corr_right = cor(PHQ_T1_total, correct_count))
Scores%>%
filter(timepoint == 1)%>%
filter(average_reaction_time < 4000)%>%
group_by(game_name)%>%
summarize(corr_RT = cor(PHQ_T1_total, average_reaction_time),
corr_right = cor(PHQ_T1_total, correct_count))
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = average_reaction_time, y = correct_count))+
geom_jitter()+
facet_grid(.~game_name)
Scores%>%
filter(timepoint == 1)%>%
ggplot(aes(x = PHQ_T1_total, y = correct_count))+
geom_jitter()+
facet_grid(.~game_name)
