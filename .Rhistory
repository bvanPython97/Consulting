dice2 <- sample(dicelist, 12, replace = TRUE)
print("2nd dice ",dice2)
value <- dice1 + dice2
if (value == 7 | value == 11){
sprintf("%s YOU WIN!", value)
}
else if (value == 2 | value == 3 | value == 12) {
sprintf("%s YOU LOSE!", value)
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 12, replace = TRUE)
print("1st dice ",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
print("2nd dice ",dice2)
total <- dice1 + dice2
}
if (total == value){
print(total + " YOU WIN!")
}
else print(total + " YOU LOSE!")
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 12, replace = TRUE)
print("1st dice ",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
print("2nd dice ",dice2)
value <- dice1 + dice2
if (value == 7 | value == 11){
sprintf("%s YOU WIN!", value)
}
else if (value == 2 | value == 3 | value == 12) {
sprintf("%s YOU LOSE!", value)
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 12, replace = TRUE)
print("1st dice ",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
print("2nd dice ",dice2)
total <- dice1 + dice2
}
if (total == value){
sprintf("%s YOU WIN!", total)
}
else sprintf("%s YOU LOSE!", total)
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 12, replace = TRUE)
print("1st dice ",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
print("2nd dice ",dice2)
value <- dice1 + dice2
if (value == 7 | value == 11){
cat(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
cat(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 12, replace = TRUE)
print("1st dice ",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
print("2nd dice ",dice2)
total <- dice1 + dice2
}
if (total == value){
cat(sprintf("%s YOU WIN!", total))
}
else cat(sprintf("%s YOU LOSE!", total))
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 12, replace = TRUE)
print("1st dice ",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
print("2nd dice ",dice2)
value <- dice1 + dice2
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 12, replace = TRUE)
print("1st dice %s",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
print("2nd dice %s",dice2)
value <- dice1 + dice2
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 12, replace = TRUE)
sprintf("1st dice %s",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
sprintf("2nd dice %s",dice2)
value <- dice1 + dice2
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 12, replace = TRUE)
sprintf("1st dice %s",dice1)
dice2 <- sample(dicelist, 12, replace = TRUE)
sprintf("2nd dice %s",dice2)
value <- dice1 + dice2
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 12, replace = TRUE)
cat(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 12, replace = TRUE)
cat(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
cat(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
cat(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
if (value == 7 | value == 11){
message(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
message(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 1, replace = TRUE)
meesage(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
total <- dice1 + dice2
}
if (total == value){
message(sprintf("%s YOU WIN!", total))
}
else message(sprintf("%s YOU LOSE!", total))
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
if (value == 7 | value == 11){
message(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
message(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 1, replace = TRUE)
mesage(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
total <- dice1 + dice2
}
if (total == value){
message(sprintf("%s YOU WIN!", total))
}
else message(sprintf("%s YOU LOSE!", total))
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
if (value == 7 | value == 11){
message(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
message(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
total <- dice1 + dice2
}
if (total == value){
message(sprintf("%s YOU WIN!", total))
}
else message(sprintf("%s YOU LOSE!", total))
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
if (value == 7 | value == 11){
message(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
message(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
total <- dice1 + dice2
}
if (total == value){
message(sprintf("%s YOU WIN!", total))
}
else message(sprintf("%s YOU LOSE!", total))
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
if (value == 7 | value == 11){
message(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
message(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
total <- dice1 + dice2
}
if (total == value){
message(sprintf("%s YOU WIN!", total))
}
else message(sprintf("%s YOU LOSE!", total))
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
if (value == 7 | value == 11){
message(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
message(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
total <- dice1 + dice2
}
if (total == value){
message(sprintf("%s YOU WIN!", total))
}
else message(sprintf("%s YOU LOSE!", total))
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
if (value == 7 | value == 11){
message(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
message(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
total <- dice1 + dice2
}
if (total == value){
message(sprintf("%s YOU WIN!", total))
}
else message(sprintf("%s YOU LOSE!", total))
}
}
craps()
craps <- function(){
dicelist <- c(1,2,3,4,5,6)
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
value <- dice1 + dice2
if (value == 7 | value == 11){
message(sprintf("%s YOU WIN!", value))
}
else if (value == 2 | value == 3 | value == 12) {
message(sprintf("%s YOU LOSE!", value))
}
else {
total <- 0
while (total != value & total != 7){
print("AGAIN!")
dice1 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("1st dice %s",dice1))
dice2 <- sample(dicelist, 1, replace = TRUE)
message(sprintf("2nd dice %s",dice2))
total <- dice1 + dice2
}
if (total == value){
message(sprintf("%s YOU WIN!", total))
}
else message(sprintf("%s YOU LOSE!", total))
}
}
craps()
t <- seq(0,10, by = 0.00001)
x <- sqrt(t)*cos(2*pi*t)
y <- sqrt(t)*sin(2*pi*t)
plot(x,y,cex = 0.01)
t <- seq(0,10, by = 0.00001)
x <- sqrt(t)*cos(2*pi*t)
y <- sqrt(t)*sin(2*pi*t)
plot(x,y,cex = 0.1)
knitr::opts_chunk$set(echo = TRUE)
library(class)
train_df <- read.csv("PA_HW1_train.csv")
train_df_pred <- knn(train = train_df[c(1,2)], test = train_df[c(1,2)], cl = train_df$col, k = 1)
tb <- table(train_df_pred, train_df$col)
tb
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tb)
test_df <- read.csv("PA_HW1_test.csv")
pred <- knn(train = train_df[c(1,2)], test = test_df[c(1,2)], cl = train_df$col, k = 1)
tb <- table(pred, test_df$col)
tb
accuracy(tb)
library(tidyverse)
library(ggplot2)
k_list <- c(1:100)
set.seed(1)
train_100 <- sapply(k_list, function(x){
train_pred <- knn(train_df[c(1,2)], train_df[c(1,2)], cl=train_df$col, k = x, prob = T)
tb <- table(train_pred, train_df$col)
error <- (tb[2]+tb[3])/175
return(error)
}
)
test_100 <- sapply(k_list, function(x){
test_pred <- knn(train_df[c(1,2)], test = test_df[c(1,2)], cl = train_df$col, k = x, prob = T)
tb <- table(test_pred, test_df$col)
error <- (tb[2]+tb[3])/1750
return(error)
}
)
ggplot() +
geom_line(aes(x = k_list, y = train_100, color = 'Train')) +
geom_line(aes(x = k_list, y = test_100, color = 'Test')) +
xlab('k') +
ylab("Error")
plt <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
plt
library(MASS)
fit <- lda(Species ~ Sepal.Length + Sepal.Width, data = iris)
prd <- predict(fit)
table(iris$Species, prd$class)
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha = 0.01)
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha = 0.05)
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha = 0.005)
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha = 0.01)
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha = 0.01) +
title("Sepal Width vs Sepal Length For 3 Species")
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha =0.01,
title("Sepal Width vs Sepal Length For 3 Species"))
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha =0.01) +
ggtitle("Sepal Length and Sepal Width of Iris Species ")
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha =0.01) +
print(ggtitle("Sepal Length and Sepal Width of Iris Species "))
grid <- expand.grid(seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = 0.01), seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = 0.01))
names(grid) <- c("Sepal.Length", "Sepal.Width")
pred <- predict(fit, grid)
bounds <- data.frame(pred$class, grid)
plt + geom_point(data = bounds, aes(x = Sepal.Length, y = Sepal.Width, color = pred.class), alpha =0.01) +
ggtitle("Sepal Length and Sepal Width of Iris Species ")
setwd("~/")
round1 <- read.csv("round1_updated.csv",header = 1)
setwd("~/")
round1 <- read.csv("round1_updated.csv",header = 1)
round1 <- read.csv("round1_updated",header = 1)
setwd("~/")
round1 <- read.csv("round1_updated",header = 1)
round1 <- read.csv("round1_updated.csv",header = 1)
round1 <- read.csv("round1_updated.csv")
setwd("C:/Users/baova/OneDrive/Desktop/Loyola Assignments/Consulting")
round1 <- read.csv("round1_updated.csv")
View(round1)
library(dplyr)
df <- round1 %>% filter(event_type != "scorecard")
df <- df %>% filter(game_name != "playlist")
View(df)
df <- subset(df, select = -sessionid)
View(df)
df <- subset(df, select = -c(trai_timestamp, response_timestamp))
df <- subset(df, select = -c(trail_timestamp, response_timestamp))
View(df)
df <- subset(df, select = -c(trial_timestamp, response_timestamp))
